@page "/converter"
@using CurrencyCalc.Data

<PageTitle>Currency Converter</PageTitle>

<h1>Currency Converter</h1>

<label for="currency1">Source:</label>
<select id="currency1" @bind="fromCurrency">
    <option value="USD">USD</option>
    <option value="EUR">EUR</option>
    <option value="GBP">GBP</option>
    <option value="JPY">JPY</option>
    <option value="AUD">AUD</option>
</select>

<label for="currency2">Target:</label>
<select id="currency2" @bind="toCurrency">
    <option value="USD">USD</option>
    <option value="EUR">EUR</option>
    <option value="GBP">GBP</option>
    <option value="JPY">JPY</option>
    <option value="AUD">AUD</option>
</select>

<input type="number" id="quantity" @bind="amount" min="1" >

<button class="btn btn-primary" @onclick="ConvertSelected">Convert</button>

<br/>
<p>@result</p>

<br/>

<div>
    <h3>My Table</h3>
    
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Source</th>
                <th>Target</th>
                <th>Value</th>
                <th>Result</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in records)
            {
                <tr>
                    <td>@record.Date</td>
                    <td>@record.Source</td>
                    <td>@record.Target</td>
                    <td>@record.Value</td>
                    <td>@record.Result</td>
                </tr>
            }
        </tbody>
    </table>
</div>
@code {
    
    private string fromCurrency = "";
    private string toCurrency = "";

    private decimal amount;

    private string result = "";

    private void ConvertSelected()
    {
        Dictionary<string, decimal> rates = new Dictionary<string, decimal>
        {
            {"USD", 1m},
            {"EUR", 0.93m},
            {"GBP", 0.76m},
            {"JPY", 130.53m},
            {"AUD", 1.31m}
        };
        
        if (!rates.ContainsKey(fromCurrency) || !rates.ContainsKey(toCurrency))
        {
            result = "Unsupported currency.";
            return;
        }

        decimal convertedAmount = ConvertCurrency(amount, fromCurrency, toCurrency, rates);
        result = $"{amount} {fromCurrency} is {convertedAmount} {toCurrency}.";
        
        
    }
    
    static decimal ConvertCurrency(decimal amount, string fromCurrency, string toCurrency, Dictionary<string, decimal> rates)
    {
        decimal rateToUSD = rates[fromCurrency];
        decimal amountInUSD = amount / rateToUSD;
        decimal targetRate = rates[toCurrency];
        return amountInUSD * targetRate;
    }

    List<History> records;

    protected override async Task OnInitializedAsync()
    {
    // Fetch data from the database
        records = await FetchRecordsFromDatabase();
    }
    
    // Method to fetch records from the database
    private async Task<List<History>> FetchRecordsFromDatabase()
    {
    // Open a connection to the database
        using var connection = await DbConnectionFactory.CreateConnectionAsync();

    // Define your SQL query
        string query = "SELECT * FROM CalcHistory";

    // Execute the query and fetch records
        using var command = connection.CreateCommand();
        command.CommandText = query;

    // Initialize list to hold records
        var records = new List<History>();

    // Execute reader and populate records
        using var reader = await command.ExecuteReaderAsync();
        while (await reader.ReadAsync())
        {
            var record = new History()
            {
                Date = reader.GetDateTime(0),
                Source = reader.GetString(1),
                Target = reader.GetString(2),
                Value = reader.GetInt32(3),
                Result = reader.GetFloat(4)
            };
            records.Add(record);
        }

        return records;
    }
    
}